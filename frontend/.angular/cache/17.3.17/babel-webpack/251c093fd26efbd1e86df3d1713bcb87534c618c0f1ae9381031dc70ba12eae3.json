{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class IssueService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000';\n  }\n  getIssues(filters = {}) {\n    let params = new HttpParams();\n    if (filters.search) params = params.set('search', filters.search);\n    if (filters.status) params = params.set('status', filters.status);\n    if (filters.priority) params = params.set('priority', filters.priority);\n    if (filters.assignee) params = params.set('assignee', filters.assignee);\n    if (filters.sortBy) params = params.set('sortBy', filters.sortBy);\n    if (filters.sortOrder) params = params.set('sortOrder', filters.sortOrder);\n    if (filters.page) params = params.set('page', filters.page.toString());\n    if (filters.pageSize) params = params.set('pageSize', filters.pageSize.toString());\n    return this.http.get(`${this.apiUrl}/issues`, {\n      params\n    });\n  }\n  getIssue(id) {\n    return this.http.get(`${this.apiUrl}/issues/${id}`);\n  }\n  createIssue(issue) {\n    return this.http.post(`${this.apiUrl}/issues`, issue);\n  }\n  updateIssue(id, issue) {\n    return this.http.put(`${this.apiUrl}/issues/${id}`, issue);\n  }\n  getHealthStatus() {\n    return this.http.get(`${this.apiUrl}/health`);\n  }\n  static {\n    this.ɵfac = function IssueService_Factory(t) {\n      return new (t || IssueService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IssueService,\n      factory: IssueService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","IssueService","constructor","http","apiUrl","getIssues","filters","params","search","set","status","priority","assignee","sortBy","sortOrder","page","toString","pageSize","get","getIssue","id","createIssue","issue","post","updateIssue","put","getHealthStatus","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mayurjoshi/Documents/Projects/Assignment_Securigeek/frontend/src/app/services/issue.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Issue {\n  id?: string;\n  title: string;\n  description?: string;\n  status: string;\n  priority: string;\n  assignee?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface IssuesResponse {\n  issues: Issue[];\n  total: number;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n}\n\nexport interface IssueFilters {\n  search?: string;\n  status?: string;\n  priority?: string;\n  assignee?: string;\n  sortBy?: string;\n  sortOrder?: string;\n  page?: number;\n  pageSize?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IssueService {\n  private readonly apiUrl = 'http://localhost:8000';\n\n  constructor(private http: HttpClient) { }\n\n  getIssues(filters: IssueFilters = {}): Observable<IssuesResponse> {\n    let params = new HttpParams();\n    \n    if (filters.search) params = params.set('search', filters.search);\n    if (filters.status) params = params.set('status', filters.status);\n    if (filters.priority) params = params.set('priority', filters.priority);\n    if (filters.assignee) params = params.set('assignee', filters.assignee);\n    if (filters.sortBy) params = params.set('sortBy', filters.sortBy);\n    if (filters.sortOrder) params = params.set('sortOrder', filters.sortOrder);\n    if (filters.page) params = params.set('page', filters.page.toString());\n    if (filters.pageSize) params = params.set('pageSize', filters.pageSize.toString());\n\n    return this.http.get<IssuesResponse>(`${this.apiUrl}/issues`, { params });\n  }\n\n  getIssue(id: string): Observable<Issue> {\n    return this.http.get<Issue>(`${this.apiUrl}/issues/${id}`);\n  }\n\n  createIssue(issue: Omit<Issue, 'id' | 'createdAt' | 'updatedAt'>): Observable<Issue> {\n    return this.http.post<Issue>(`${this.apiUrl}/issues`, issue);\n  }\n\n  updateIssue(id: string, issue: Partial<Issue>): Observable<Issue> {\n    return this.http.put<Issue>(`${this.apiUrl}/issues/${id}`, issue);\n  }\n\n  getHealthStatus(): Observable<{ status: string }> {\n    return this.http.get<{ status: string }>(`${this.apiUrl}/health`);\n  }\n}"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAoC7D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,MAAM,GAAG,uBAAuB;EAET;EAExCC,SAASA,CAACC,OAAA,GAAwB,EAAE;IAClC,IAAIC,MAAM,GAAG,IAAIP,UAAU,EAAE;IAE7B,IAAIM,OAAO,CAACE,MAAM,EAAED,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEH,OAAO,CAACE,MAAM,CAAC;IACjE,IAAIF,OAAO,CAACI,MAAM,EAAEH,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEH,OAAO,CAACI,MAAM,CAAC;IACjE,IAAIJ,OAAO,CAACK,QAAQ,EAAEJ,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEH,OAAO,CAACK,QAAQ,CAAC;IACvE,IAAIL,OAAO,CAACM,QAAQ,EAAEL,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEH,OAAO,CAACM,QAAQ,CAAC;IACvE,IAAIN,OAAO,CAACO,MAAM,EAAEN,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEH,OAAO,CAACO,MAAM,CAAC;IACjE,IAAIP,OAAO,CAACQ,SAAS,EAAEP,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,WAAW,EAAEH,OAAO,CAACQ,SAAS,CAAC;IAC1E,IAAIR,OAAO,CAACS,IAAI,EAAER,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,MAAM,EAAEH,OAAO,CAACS,IAAI,CAACC,QAAQ,EAAE,CAAC;IACtE,IAAIV,OAAO,CAACW,QAAQ,EAAEV,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEH,OAAO,CAACW,QAAQ,CAACD,QAAQ,EAAE,CAAC;IAElF,OAAO,IAAI,CAACb,IAAI,CAACe,GAAG,CAAiB,GAAG,IAAI,CAACd,MAAM,SAAS,EAAE;MAAEG;IAAM,CAAE,CAAC;EAC3E;EAEAY,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAQ,GAAG,IAAI,CAACd,MAAM,WAAWgB,EAAE,EAAE,CAAC;EAC5D;EAEAC,WAAWA,CAACC,KAAoD;IAC9D,OAAO,IAAI,CAACnB,IAAI,CAACoB,IAAI,CAAQ,GAAG,IAAI,CAACnB,MAAM,SAAS,EAAEkB,KAAK,CAAC;EAC9D;EAEAE,WAAWA,CAACJ,EAAU,EAAEE,KAAqB;IAC3C,OAAO,IAAI,CAACnB,IAAI,CAACsB,GAAG,CAAQ,GAAG,IAAI,CAACrB,MAAM,WAAWgB,EAAE,EAAE,EAAEE,KAAK,CAAC;EACnE;EAEAI,eAAeA,CAAA;IACb,OAAO,IAAI,CAACvB,IAAI,CAACe,GAAG,CAAqB,GAAG,IAAI,CAACd,MAAM,SAAS,CAAC;EACnE;;;uBAlCWH,YAAY,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ7B,YAAY;MAAA8B,OAAA,EAAZ9B,YAAY,CAAA+B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}